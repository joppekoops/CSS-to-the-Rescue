*, :before, :after {
	box-sizing: border-box;
/*	outline: 1px solid lime; */
}

/* Add custom property with the index inside parent to all elements */
:nth-of-type(1) {--index: 1}
:nth-of-type(2) {--index: 2}
:nth-of-type(3) {--index: 3}
:nth-of-type(4) {--index: 4}
:nth-of-type(5) {--index: 5}
:nth-of-type(6) {--index: 6}
:nth-of-type(7) {--index: 7}
:nth-of-type(8) {--index: 8}
:nth-of-type(9) {--index: 9}
:nth-of-type(10) {--index: 10}
:nth-of-type(11) {--index: 11}
:nth-of-type(12) {--index: 12}
:nth-of-type(13) {--index: 13}
:nth-of-type(14) {--index: 14}
:nth-of-type(15) {--index: 15}
:nth-of-type(16) {--index: 16}
:nth-of-type(17) {--index: 17}
:nth-of-type(18) {--index: 18}
:nth-of-type(19) {--index: 19}
:nth-of-type(20) {--index: 20}
:nth-of-type(21) {--index: 21}
:nth-of-type(22) {--index: 22}
:nth-of-type(23) {--index: 23}
:nth-of-type(24) {--index: 24}
:nth-of-type(25) {--index: 25}
:nth-of-type(26) {--index: 26}
:nth-of-type(27) {--index: 27}
:nth-of-type(28) {--index: 28}
:nth-of-type(29) {--index: 29}
:nth-of-type(30) {--index: 30}
:nth-of-type(31) {--index: 31}
:nth-of-type(32) {--index: 32}

/* The body is the screen filling 3d scene */
body {
	perspective: 100em;
	transform-style: preserve-3d;

	display: grid;
	place-items: center;

	min-height: 100dvh;
	
	margin: 0;

	background-image: radial-gradient(ellipse at center, #eff, #9bf);

	pointer-events: none; /* Make everything not clickable because some things are covering other things */
}

/* The title */
header {
	position: fixed;
	top: 0;
	right: 0;
	left: 0;

	text-align: left;
}

h1 {
	margin: 1rem;
	
	display: flex;
	
	background-image: 
		linear-gradient(-45deg, #fff0 60%, #ffff 60%, #ffff 70%, #fff0 70%), /* white stripe */
		radial-gradient(at 30% 30%, #ffff, #0000 100%), /* white glare */
		repeating-linear-gradient(-20deg, #89a 0px, #bcd 1px, #fff 1px, #bcd 2px); /* brush stripes */
	filter: drop-shadow(.1rem .1rem #222) drop-shadow(-.1rem -.1rem #666) drop-shadow(-.05rem .05rem #79f) blur(.3px) brightness(1.05); /* bevel effect */
	
	animation: fade 2s both;

	font-family: Verdana, Arial, sans-serif;
	font-size: clamp(2rem, 9vw, 6rem);
	text-align: center;
	background-clip: text;
	color: transparent;
}

header span {
	animation: move 1s calc(var(--index) * .1s) both;

}

@keyframes fade {
	0% {
		filter: drop-shadow(.1rem .1rem #222) drop-shadow(-.1rem -.1rem #666) drop-shadow(-.05rem .05rem #79f) blur(100px) brightness(1.05);
	}
	100% {
		filter: drop-shadow(.1rem .1rem #222) drop-shadow(-.1rem -.1rem #666) drop-shadow(-.05rem .05rem #79f) blur(.3px) brightness(1.05);
	}
}

@keyframes move {
	0% {
		margin-top: 100vh;
	}
	100% {
		margin-top: 0em;
	}
}

/* On a wider screen the title goes on the right side */
@media (width > 920px) {
	header {
		top: 0;
		right: 0;
		left: unset;
		bottom: 0;

		writing-mode: vertical-rl;
	}

	header h1 {
		text-align: left;
		font-size: clamp(2rem, 9vh, 6rem);
	}
}

/* The whole mixer */
main {
	transform-style: preserve-3d;
	transform: translateZ(10em) rotateX(30deg);
	position: relative;

	display: grid;
	grid-template-columns: max-content;
	gap: 2rem;

	max-width: 80vw;
	padding: 2rem;

	background-color: black;
	background-image: linear-gradient(to bottom right, #444, #222);
}

/* On wider screens the mixer gets wider and has two columns */
@media (width > 750px) {
	main {
		grid-template-columns: repeat(2, max-content);
	}
}

/* Front of the mixer */
main:after {
	content: '';
	
	transform-origin: top center;
	transform: rotateX(-90deg);

	position: absolute;
	bottom: -8rem;

	width: 100%;
	height: 8rem;
	
	background-color: #222;
}

/* Bigger labels on the controller */
h2 {
	grid-column: 1/-1;

	margin: 0 0 .5em 0;

	font-family: Verdana, Arial, sans-serif;
	color: #dde;
	font-size: 1em;
	font-weight: 400;

	text-shadow: .1rem .1rem 0 black;
}

/* Smaller labels on the controller */
label {
	grid-column: 1/-1;

	margin: 0 0 .5em 0;

	font-family: Verdana, Arial, sans-serif;
	color: #dde;
	font-size: .8em;
	font-weight: 400;
	text-shadow: .1rem .1rem 0 black;
}

/* All sections on the mixer are grid
Either to center content or to get multiple columns */
section {
	display: grid;
}

/* Screen */
main > section:first-of-type {
	--aspect-ratio: 16 / 9; /* Aspect ratio is used for the screen size, as well as the speed of the graphic */

	container-name: screen; /* Screen is kind of a differend window with its own viewport units */
	container-type: size;

	position: relative;

	display: block;

	width: calc(80vw - 4rem);
	max-width: 24rem;
	aspect-ratio: var(--aspect-ratio);
	
	background: #111;
	
	border-top: 3px solid black;
	border-left: 3px solid black;
}

/* Glare on the display */
main > section:first-of-type:before {
	content: '';

	position: absolute;
	top: 0;
	left: 0;
	z-index: 999; /* Should overlay everything on the display */

	display: block;
	
	width: 100%;
	height: 100%;
	
	background-image: radial-gradient(ellipse at 30% 30%, #fff3, #fff0);
}

/* The heading of the screen should not be visible */
section:first-of-type h2 {
	opacity: 0;

	height: 0;
	margin: 0;
}

/* Graphic */
main > section:first-of-type div:first-of-type {
	--speed: calc(5s * var(--aspect-ratio));
	transform: translateY(calc(50cqh - 50%));
	transition: transform 9000000s linear; /* The very long time makes it look like it is in the same place */

	& div {
		--speed: 5s;

		transform: translateX(calc(50cqw - 50%));

		opacity: calc(var(--graphic-opacity) * 1%);

		width: 13cqw;
		aspect-ratio: 1;
		
		font-size: 13cqw;
		line-height: 1;
	}
}

/* Video */

section:first-of-type video {
	position: absolute;
	inset: 0;
	z-index: -1;
	
	width: 100cqw;
}

/*Animations for moving a graphic*/
/*Now done with transitions*/
/*@keyframes move-graphic-x {
	0% {
		transform: translateX(calc(0cqw - 0%));
	}

	100% {
		transform: translateX(calc(100cqw - 100%));
	}
}*/

/*@keyframes move-graphic-y {
	0% {
		transform: translateY(calc(0cqh - 0%));
	}

	100% {
		transform: translateY(calc(100cqh - 100%));
	}
}*/

/* graphics controls section: Joystick + Opacity slider */

section:nth-of-type(2) {
	transform-style: preserve-3d;
	
	grid-template-columns: max-content max-content;
	column-gap: 1em;
}

section:nth-of-type(2) section{
	transform-style: preserve-3d;
}

/* The joystick */
section:nth-of-type(2) div:nth-of-type(1) {
	transform-style: preserve-3d; /* Add the Joystick to the 3d scene */

	/* Position 8 buttons and a thumb div in a 3x3 grid */
	display: grid;
	grid-template-columns: repeat(3, 1fr);
	grid-template-rows: repeat(3, 1fr);
	
	width: 8rem;
	aspect-ratio: 1;
	
	border: 3px solid #333;
	border-radius: 100%;

	background-color: #fff5;
	background-image: 
		radial-gradient(ellipse at 50% 50%, #000f 14%, #0000 19.5%, #666f 20%, #0000 21.5%),
		radial-gradient(ellipse at 70% 70%, #999, #000 80%)
	;
	box-shadow: inset 1px 1px 1px #000;

	pointer-events: all; /* Make the joystick interactable again */
	user-select: none;

	/* Make the buttons invisble */
	& button {
		border: none;

		background: none;

		pointer-events: all;
	}

	/* The thumb */
	& div {
		transform-style: preserve-3d;
		transform: translateZ(-.5em) translateZ(2.5em);
		scale: 1.3;

		display: grid;
		grid-template-columns: 1fr;
		grid-template-rows: 1fr;

		transition: .2s;

		outline: 1px solid #555;
		border-radius: 100%;
		border: none;
		width: 100%;

		background: #333;
		background-image: radial-gradient(ellipse at 30% 30%, #ccc, #333 80%);
		box-shadow: 1px 1px 1px #000, 3px 3px 3px #000, 5px 5px 5px #000;
		
		pointer-events: none;
		cursor: pointer;
	}

	/* The stick */
	& ul {
		--radius: .5rem; /* outer radius of the stick */
		--length: 2.5rem; /* length of the stick */
		--faces: 32; /* amount of faces, should be the same as in the HTML */

		--face-width: calc(2 * var(--radius) * sin(360deg / var(--faces) / 2) + 1px); /* Calculate the width of a face */
		--face-distance: calc(var(--radius) * cos(360deg / var(--faces) / 2)); /* Calculate the distance from the middle to the face: inner radius */
		  
		/* color in HSL */
		--h: 40deg;
		--s: 0%;
		--l: 20%;
		  
		--opacity: 1;

		transform-style: preserve-3d;
		transform: translateZ(calc(-.5 * var(--length))) rotateX(-90deg) rotateY(-45deg); /* make the stick vertical and rotate the shading */
		  
		display: grid;
		align-items: center;
		justify-items: center;
		grid-area: 1/1;

		margin: 0;
		padding: 0;
		
		list-style: none;
	}

	/* Faces of the cilinder */
	& li {
		transform: rotateY(calc(360deg / var(--faces) * var(--index))) translateZ(var(--face-distance));
		opacity: var(--opacity);

		grid-area: 1/1;

		width: var(--face-width);
		height: var(--length);
		outline-offset: -1px;
		
		background-color: #333;

		/* Calculating the shading based on the index of the face */
  		background-image: 
  			linear-gradient(
  				to bottom,
  				#0000 90%,
  				#000f
  			),
  			linear-gradient(
	  			to right, 
	  			hsl(
	  				var(--h), 
	  				var(--s), 
	  				calc(var(--l) * (((abs((var(--index) - 1) - .5 * var(--faces)) / var(--faces) - .5)) + 1))
	  			), 
	  			hsl(
	  				var(--h), 
	  				var(--s), 
	  				calc(var(--l) * (((abs((var(--index) + 0) - .5 * var(--faces)) / var(--faces) - .5)) + 1))
	  			)

  			)
  		;

	}
}

/* Functionality of the joystick */

/*Top left button*/
main:has(section:nth-of-type(2) div:nth-of-type(1):active):has(section:nth-of-type(2) div:nth-of-type(1) button:nth-child(1):hover) {

	/*Y direction animation*/
	& > section:nth-of-type(1) > div:first-of-type {
		transform: translateY(calc(0cqh - 0%));
		transition: transform var(--speed) linear;

		/*X direction animation*/
		& div {
			transform: translateX(calc(0cqw - 0%));
			transition: transform var(--speed) linear;
		}
	}

	/*Joystick direction*/
	& section:nth-of-type(2) div:nth-of-type(1) div {
		transform: translateZ(-.5em) rotateX(31.5deg) rotateY(-31.5deg) translateZ(2.5em);
	}
}

/*Top center button*/
main:has(section:nth-of-type(2) div:nth-of-type(1):active):has(section:nth-of-type(2) div:nth-of-type(1) button:nth-child(2):hover) {

	/*Y direction animation*/
	& > section:nth-of-type(1) > div:first-of-type {
		transform: translateY(calc(0cqh - 0%));
		transition: transform var(--speed) linear;

		/*X direction animation*/
		& div {

		}
	}

	/*Joystick direction*/
	& section:nth-of-type(2) div:nth-of-type(1) div {
		transform: translateZ(-.5em) rotateX(45deg) translateZ(2.5em);
	}
}

/*Top right button*/
main:has(section:nth-of-type(2) div:nth-of-type(1):active):has(section:nth-of-type(2) div:nth-of-type(1) button:nth-child(3):hover) {

	/*Y direction animation*/
	& > section:nth-of-type(1) > div:first-of-type {
		transform: translateY(calc(0cqh - 0%));
		transition: transform var(--speed) linear;

		/*X direction animation*/
		& div {
			transform: translateX(calc(100cqw - 100%));
			transition: transform var(--speed) linear;
		}
	}

	/*Joystick direction*/
	& section:nth-of-type(2) div:nth-of-type(1) div {
		transform: translateZ(-.5em) rotateX(31.5deg) rotateY(31.5deg) translateZ(2.5em);
	}
}

/*Center left button*/
main:has(section:nth-of-type(2) div:nth-of-type(1):active):has(section:nth-of-type(2) div:nth-of-type(1) button:nth-child(4):hover) {

	/*Y direction animation*/
	& > section:nth-of-type(1) > div:first-of-type {

		/*X direction animation*/
		& div {
			transform: translateX(calc(0cqw - 0%));
			transition: transform var(--speed) linear;
		}
	}

	/*Joystick direction*/
	& section:nth-of-type(2) div:nth-of-type(1) div {
		transform: translateZ(-.5em) rotateY(-45deg) translateZ(2.5em);
	}
}

/*Center right buttton*/
main:has(section:nth-of-type(2) div:nth-of-type(1):active):has(section:nth-of-type(2) div:nth-of-type(1) button:nth-child(6):hover) {

	/*Y direction animation*/
	& > section:nth-of-type(1) > div:first-of-type {

		/*X direction animation*/
		& div {
			transform: translateX(calc(100cqw - 100%));
			transition: transform var(--speed) linear;
		}
	}

	/*Joystick direction*/
	& section:nth-of-type(2) div:nth-of-type(1) div {
		transform: translateZ(-.5em) rotateY(45deg)  translateZ(2.5em);
	}
}

/*Bottom left buttton*/
main:has(section:nth-of-type(2) div:nth-of-type(1):active):has(section:nth-of-type(2) div:nth-of-type(1) button:nth-child(7):hover) {

	/*Y direction animation*/
	& > section:nth-of-type(1) > div:first-of-type {
		transform: translateY(calc(100cqh - 100%));
		transition: transform var(--speed) linear;

		/*X direction animation*/
		& div {
			transform: translateX(calc(0cqw - 0%));
			transition: transform var(--speed) linear;
		}
	}

	/*Joystick direction*/
	& section:nth-of-type(2) div:nth-of-type(1) div {
		transform: translateZ(-.5em) rotateY(-31.5deg) rotateX(-31.5deg) translateZ(2.5em);
	}
}

/*Bottom center button*/
main:has(section:nth-of-type(2) div:nth-of-type(1):active):has(section:nth-of-type(2) div:nth-of-type(1) button:nth-child(8):hover) {

	/*Y direction animation*/
	& > section:nth-of-type(1) > div:first-of-type {
		transform: translateY(calc(100cqh - 100%));
		transition: transform var(--speed) linear;

		/*X direction animation*/
		& div {

		}
	}

	/*Joystick direction*/
	& section:nth-of-type(2) div:nth-of-type(1) div {
		transform: translateZ(-.5em) rotateX(-45deg)  translateZ(2.5em);
	}
}

/*Bottom right button*/
main:has(section:nth-of-type(2) div:nth-of-type(1):active):has(section:nth-of-type(2) div:nth-of-type(1) button:nth-child(9):hover) {

	/*Y direction animation*/
	& > section:nth-of-type(1) > div:first-of-type {
		transform: translateY(calc(100cqh - 100%));
		transition: transform var(--speed) linear;

		/*X direction animation*/
		& div {
			transform: translateX(calc(100cqw - 100%));
			transition: transform var(--speed) linear;
		}
	}

	/*Joystick direction*/
	& section:nth-of-type(2) div:nth-of-type(1) div {
		transform: translateZ(-.5em) rotateX(-31.5deg) rotateY(31.5deg) translateZ(2.5em);
	}
}

/* Slider controls */

input {
	pointer-events: all; /* Make sliders interactible */
}

input[type="range"] {
	appearance: none; /* Remove standard styling */

	height: 8em;
	width: 2em;

	background-color: transparent;
	
	writing-mode: vertical-lr; /* Make the slider verticle */
	direction: rtl; /* Reverse the slider */
	color: white;
}

/* slider thumb */
input[type=range]::-webkit-slider-thumb {
	appearance: none;

	height: 1.5em;
	width: 2.5em;
	border-radius: .2em;

	margin-left: -.6em;
	margin-bottom: .5em;
	
	background: linear-gradient(to top, #555 30%, #999 30%, #111 70%, #555 70%);
	box-shadow: -1px .5px #222, -2px 1px #222, -3px 1.5px #222, -4px 2px #222, -5px 2.5px #222, -6px 3px #222; /* Make it look 3d */
	filter: drop-shadow(-2px 2px 2px black);
}

/* slider track */
input[type=range]::-webkit-slider-runnable-track {
  	height: 100%;
  	width: .5em;

  	border-radius: .5em;

  	background: #111;

  	box-shadow: inset -1px -1px 3px #333; /* Make it look 3d */
  	
  	cursor: pointer;
}
